#!/usr/bin/python

import errno
import logging
import optparse
import sys
import json
import subprocess 

try:
    import boto
except:
    raise SystemExit("The boto module is required.")

import blueprint.cli
from blueprint import context_managers


if __name__ == '__main__':
    parser = optparse.OptionParser('usage: %prog [options] stack config')
    parser.add_option("-a", "--aws-access-key-id", dest="aws_access_key_id")
    parser.add_option("-k", "--aws-secret-access-key", dest="aws_secret_access_key")
    (options, args) = parser.parse_args()
    if len(args) != 2 or (not options.aws_access_key_id or not options.aws_secret_access_key):
        parser.print_help()
        exit(1)

    stack_name = args[0]
    config_name = args[1]

    cf = boto.connect_cloudformation(options.aws_access_key_id, options.aws_secret_access_key)
    stacks = cf.describe_stacks(stack_name_or_id=stack_name)
    if 1 != len(stacks):
        exit(2)
    stack = stacks[0]

    metadata = json.loads(stack.describe_resource(config_name)['DescribeStackResourceResponse']['DescribeStackResourceResult']['StackResourceDetail']['Metadata'])
    as_json = json.dumps(metadata['AWS::CloudFormation::Init']['config'], indent=2)
    b = blueprint.Blueprint.loads(as_json)
    with context_managers.mkdtemp():
        filename = b.sh().dumpf()
        p = subprocess.Popen(['sh', filename], close_fds=True)
        p.communicate()
        sys.exit(p.returncode)
